// Generated by gencpp from file human_detection/bounding_box.msg
// DO NOT EDIT!


#ifndef HUMAN_DETECTION_MESSAGE_BOUNDING_BOX_H
#define HUMAN_DETECTION_MESSAGE_BOUNDING_BOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace human_detection
{
template <class ContainerAllocator>
struct bounding_box_
{
  typedef bounding_box_<ContainerAllocator> Type;

  bounding_box_()
    : xmin(0)
    , xmax(0)
    , ymin(0)
    , ymax(0)  {
    }
  bounding_box_(const ContainerAllocator& _alloc)
    : xmin(0)
    , xmax(0)
    , ymin(0)
    , ymax(0)  {
  (void)_alloc;
    }



   typedef uint16_t _xmin_type;
  _xmin_type xmin;

   typedef uint16_t _xmax_type;
  _xmax_type xmax;

   typedef uint16_t _ymin_type;
  _ymin_type ymin;

   typedef uint16_t _ymax_type;
  _ymax_type ymax;





  typedef boost::shared_ptr< ::human_detection::bounding_box_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::human_detection::bounding_box_<ContainerAllocator> const> ConstPtr;

}; // struct bounding_box_

typedef ::human_detection::bounding_box_<std::allocator<void> > bounding_box;

typedef boost::shared_ptr< ::human_detection::bounding_box > bounding_boxPtr;
typedef boost::shared_ptr< ::human_detection::bounding_box const> bounding_boxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::human_detection::bounding_box_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::human_detection::bounding_box_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace human_detection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'human_detection': ['/home/jerry/Documents/workspaces/ROS_human_detection/src/human_detection/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::human_detection::bounding_box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::human_detection::bounding_box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::human_detection::bounding_box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::human_detection::bounding_box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::human_detection::bounding_box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::human_detection::bounding_box_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::human_detection::bounding_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a18150eb9bc571abec460d2df647248";
  }

  static const char* value(const ::human_detection::bounding_box_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a18150eb9bc571aULL;
  static const uint64_t static_value2 = 0xbec460d2df647248ULL;
};

template<class ContainerAllocator>
struct DataType< ::human_detection::bounding_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "human_detection/bounding_box";
  }

  static const char* value(const ::human_detection::bounding_box_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::human_detection::bounding_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 xmin\n\
uint16 xmax\n\
uint16 ymin\n\
uint16 ymax\n\
";
  }

  static const char* value(const ::human_detection::bounding_box_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::human_detection::bounding_box_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xmin);
      stream.next(m.xmax);
      stream.next(m.ymin);
      stream.next(m.ymax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bounding_box_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::human_detection::bounding_box_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::human_detection::bounding_box_<ContainerAllocator>& v)
  {
    s << indent << "xmin: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.xmin);
    s << indent << "xmax: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymin: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ymin);
    s << indent << "ymax: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ymax);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMAN_DETECTION_MESSAGE_BOUNDING_BOX_H
